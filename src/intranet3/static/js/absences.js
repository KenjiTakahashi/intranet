function generateTable(data) {
    var $absences = $('.absences');
    // Inform user that something is happening.
    $absences.text('Preparing data, please wait...');

    // For starters, prepare HTML structure. If it's generated by JS, it should
    // be 100% generated.
    var $struct = $([ 
        '<div class="holder">',
            '<div class="floaty userPlaceholder">User</div>',
            '<div class="floaty days">',
                '<table class="display" id="days">',
                    '<thead></thead>',
                '</table>',
            '</div>',
        '</div>',
        '<div class="clear"><!-- nothing --></div>',
        '<div class="holder">',
            '<div class="floaty users">',
                '<table class="display" id="users">',
                    '<tbody></tbody>',
                '</table>',
            '</div>',
            '<div class="floaty scrollable">',
                '<table class="display" id="data">',
                    '<tbody></tbody>',
                '</table>',
            '</div>',
        '</div>'
    ].join('\n'));

    // All necessary variables
    var today = new Date();
    var todayString = $.datepicker.formatDate('yy-mm-dd', today);
    var dayLetters = ['M', 'T', 'W', 'M', 'F', 'S', 'S'];
    var startDay = data.startDay.day;
    var dayOfWeek = data.startDay.dow;

    // Selectors
    var $days = $struct.find('#days thead');
    var $users = $struct.find('#users tbody');
    var $data = $struct.find('#data tbody');
    var singleRowStub = $('<tr />');
    var rows = [];

    // Generate all headers!
    // Header 1: month's name (July)
    var header1 = $('<tr />');
    // Header 2: month's days (1, 2, 3...)
    var header2 = $('<tr />');
    // Header 3: week days (M, T, W...)
    var header3 = $('<tr />');
    var first = true;
    _.each(data.months, function(m){
        var firstMonth = (data.months.indexOf(m) == 0);
        // Month header
        // Month name is spanning through all days
        var colspan = firstMonth ? m[1]-startDay+1 : m[1];
        var headTd = $('<th/>').text(m[0]).attr('colspan', colspan).addClass('month');
        header1.append(headTd);
        var iTemp = firstMonth ? startDay : 1;
        for(var i=iTemp; i<=m[1]; i++) {
            // Day ID, e.g. 2013-06-10
            var dayId = data.year + '-' + (m[2]<10 ? '0' : '') + m[2] + '-' + (i<10 ? '0' : '') + i
            // Day number
            var head2Td = $('<th class="day">'+i+'</th>');
            // Week day letter
            var head3Td = $('<th class="day">'+dayLetters[(dayOfWeek%7)]+'</th>');
            var td;
            // Workaround to make all cells have the same height
            if(first) {
                td = $('<td class="'+dayId+'">&nbsp;</td>');
                first = false;
            } else {
                td = $('<td />');
            }
            td.addClass(dayId);
            // Special classes
            if(i == m[1]) { // End of the month
                head2Td.addClass('monthend');
                head3Td.addClass('monthend');
                td.addClass('monthend');
            }
            if(dayOfWeek%7 >= 5 || data.holidays.indexOf(dayId) != -1) { // Saturday, Sunday or Holiday
                head2Td.addClass('holiday');
                head3Td.addClass('holiday');
                td.addClass('holiday');
            }
            if(dayId === todayString) { // Today
                head2Td.addClass('today');
                head3Td.addClass('today');
                td.addClass('today');
            }
            header2.append(head2Td);
            header3.append(head3Td);
            singleRowStub.append(td);
            dayOfWeek++;
        }
    });

    // Generate all users!
    var users = '';
    _.each(data.users, function(u){
        var row = singleRowStub.clone();
        var leaves = '<span class="help" title="leave days used / leave days mandated">('+u.leave_used+'/'+u.leave_mandated+')</span>';
        users += '<tr><td class="user">'+u.name+' '+leaves+'</td></tr>';
        if(u.id in data.absences) { // Absences
            _.each(data.absences[u.id], function(attr, start){
                // attr: [length, type, description]
                var $td = row.find('.'+start);
                $td.addClass(attr[1]).attr({
                    colspan: attr[0],
                    title: attr[2]
                });
                $td.nextAll(':lt('+(attr[0]-1)+')').remove();
            });
        }
        if(u.id in data.lates) { // Latenesses
            _.each(data.lates[u.id], function(why, when){
                row.find('.'+when).addClass('late').attr('title', why);
            });
        }
        rows.push(row);
    });

    // Append!
    $days.append(header1);
    $days.append(header2);
    $days.append(header3);
    $users.append(users);
    $data.append(rows);
    $absences.text('').append($struct);
    
    /*
     * setSize sets size of all divs containing tables, to expand to the whole screen.
     */
    function setSize() {
        var $absences = $('.absences'),
            $daysParent = $('#days').parent(),
            $usersParent = $('#users').parent(),
            $p = $('#data').parent(),
            // Width: .absences width - userlist width
            width = $absences.innerWidth() - $usersParent.width(),
            // Height: window height - everything above .absences - dayslist
            height = $(window).innerHeight() - $absences.offset().top - $daysParent.height(), 
            // Margin compensates for scrollbars and bottom padding
            margin = 15;
        $daysParent.width(width-margin);
        $usersParent.height(height-3*margin);
        // $p is bigger to recompensate for scrollbars
        $p.width(width).height(height-2*margin);
    }
    
    var $daysParent = $('#days').parent(),
        $usersParent = $('#users').parent(),
        $p = $('#data').parent(),
        lastLeft = $p.scrollLeft(),
        lastTop = $p.scrollTop();
    // Scroll event
    $p.on('scroll', function(e){
        var left = $p.scrollLeft(),
            top = $p.scrollTop();
        // Do something only if values have changed
        if(left != lastLeft) {
            $daysParent.scrollLeft(left);
            lastLeft = left;
        }
        if(top != lastTop) {
            $usersParent.scrollTop(top);
            lastTop = top;
        }
    });
    // Resize elements along with window, or else everything will break
    $(window).resize(function(e){
        setSize();
    });
    // After all is generated, resize!
    setSize();
}
